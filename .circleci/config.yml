version: 2.1

orbs:
  node: circleci/node@4.1.0
  aws-cli: circleci/aws-cli@1.3.1
  eb: circleci/aws-elastic-beanstalk@1.0.0
  browser-tools: circleci/browser-tools@1.2.3

commands:
  setup:
    description: |
      Install and authenticate with the Elastic Beanstalk CLI. You must have your AWS auth environment variables set for ["AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_DEFAULT_REGION"].
    steps:
      - run:
          command: |
            if [[ $EUID == 0 ]]; then export SUDO=""; else # Check if we are root
              export SUDO="sudo";
            fi

            SetupPython() {
                # setups python3
                $SUDO apt-get -qq -y install python3-dev
                SetupPipx
            }

            SetupPipx() {
                if [ "$(which pip | tail -1)" ]; then
                    echo "pip found"
                else
                    echo "pip not found"
                    $SUDO apt-get update
                    $SUDO apt-get install -qq -y python3-setuptools
                    curl https://bootstrap.pypa.io/pip/3.5/get-pip.py | python3
                fi
                # install venv with system for pipx
                # by using pipx we dont have to worry about activating the virtualenv before using eb
                $SUDO apt-get -qq -y install python3-venv
                pip install pipx
            }



            InstallEBCLI() {
                if uname -a | grep Darwin > /dev/null 2>&1; then
                    cd /tmp || { echo "Not able to access /tmp"; return; }
                    git clone https://github.com/aws/aws-elastic-beanstalk-cli-setup.git
                    brew install zlib openssl readline
                    CFLAGS="-I$(brew --prefix openssl)/include -I$(brew --prefix readline)/include -I$(xcrun --show-sdk-path)/usr/include" LDFLAGS="-L$(brew --prefix openssl)/lib -L$(brew --prefix readline)/lib -L$(brew --prefix zlib)/lib" ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer >/dev/null 2>&1
                    return $?
                elif uname -a | grep Linux > /dev/null 2>&1; then
                    $SUDO apt-get -qq update > /dev/null
                    # these are the system level deps for the ebcli
                    $SUDO apt-get -qq -y install build-essential zlib1g-dev libssl-dev libncurses-dev libffi-dev libsqlite3-dev libreadline-dev libbz2-dev
                    if [ "$(which python3 | tail -1)" ]; then
                        echo "Python3 env found"
                        SetupPipx
                    else
                        echo "Python3 env not found, setting up python with apt"
                        SetupPython
                    fi
                fi
                    pipx install awsebcli
                    echo "Complete"
            }

            CheckAWSEnvVars() {
                ERRMSGTEXT="has not been set. This environment variable is required for authentication."
                if [ -z "$AWS_ACCESS_KEY_ID" ]; then
                    echo "AWS_ACCESS_KEY_ID $ERRMSGTEXT"
                    exit 1
                fi
                if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
                    echo "AWS_SECRET_ACCESS_KEY $ERRMSGTEXT"
                    exit 1
                fi
                if [ -z "$AWS_DEFAULT_REGION" ]; then
                    echo "AWS_DEFAULT_REGION $ERRMSGTEXT"
                    exit 1
                fi
            }

            # Will not run if sourced for bats.
            # View src/tests for more information.
            TEST_ENV="bats-core"
            if [ "${0#*$TEST_ENV}" == "$0" ]; then
                CheckAWSEnvVars
                InstallEBCLI
            fi
          name: Setting Up Elastic Beanstalk CLI

jobs:
  build:
    docker:
      - image: "cimg/base:stable"
    steps:
      - checkout
#      - node/install
      - aws-cli/setup
      - eb/setup
#      - browser-tools/install-browser-tools
#      - run:
#          name: Install Frontend
#          command: |
#            npm run install:frontend
#      - run:
#          name: Install Backend
#          command: |
#            npm run install:backend
#      - run:
#          name: Build Frontend
#          command: |
#            npm run build:frontend
#      - run:
#          name: Test Frontend
#          command: |
#            npm run test:frontend
#      - run:
#          name: Build Backend
#          command: |
#            npm run build:backend
#      - run:
#          name: Deployment
#          command: |
#            npm run deploy:frontend
#      - run:
#          name: Deployment
#          command: |
#            npm run deploy:backend
  deploy:
    description: |
      Deploy an update to an existing AWS Elastic Beanstalk environment.
    docker:
      - image: <<parameters.image>>
    parameters:
      app-dir:
        default: ./udagram-api/www
        description: Path to the directory containing your application source code. My default, the current directory will be used.
        type: string
      application-name:
        default: "udacity"
        description: The name of the application (used during `eb init`).
        type: string
      description:
        default: "Udacity-env"
        description: The description for the application version, enclosed in double quotation marks.
        type: string
      environment-name:
        default: ""
        description: The name of the existing environment (created with `eb create`) to update.
        type: string
      image:
        default: cimg/base:stable
        description: Enter a custom docker image for this job. By default CircleCI's optimized `cimg/base` image will be used.
        type: string
      label:
        default: ""
        description: Specify a label to use for the version that the EB CLI creates. If the label has already been used, the EB CLI redeploys the previous version with that label.
        type: string
      platform-version:
        default: node.js
        description: The platform version to use. You can specify a platform, a platform and version, a platform branch, a solution stack name, or a solution stack ARN. Use 'eb platform list' to get a list of available configurations.
        type: string
    steps:
      - checkout
      - setup
      - run:
          command: |
            eb init <<parameters.application-name>> -r $AWS_DEFAULT_REGION -p <<parameters.platform-version>>
            eb deploy <<parameters.environment-name>> <<#parameters.label>>-l <<parameters.label>><</parameters.label>> <<#parameters.description>>-m <<parameters.description>><</parameters.description>>
          name: EB Deploy
          working_directory: <<parameters.app-dir>>



workflows:
  workflow:
    jobs:
      - build
      - deploy
          context: aws-creds
            environment-name: my-app
            filters:
              branches:
                only:
                  - main
            label: version-<<pipeline.number>>
